┌─────────────────────────────────────────────────────────────────────────────────────┐
│                           CHEFMATE AI - PIPELINE ARCHITECTURE                       │
│                      						                      │
└─────────────────────────────────────────────────────────────────────────────────────┘

🔍 PIPELINE FLOW - STEP BY STEP BREAKDOWN
═══════════════════════════════════════════════════════════════════════════════════════

┌─────────────────────────────────────────────────────────────────────────────────────┐
│  STEP 1: USER QUERY RECEPTION                                                      │
└─────────────────────────────────────────────────────────────────────────────────────┘

[USER INPUT] ──────────────────────────> [API ENDPOINT]
   │                                          │
   │ Examples:                                │ POST /chat
   │ • "Make pasta with tomatoes"             │ Location: app/api/chat.py
   │ • "Chicken curry recipe"                 │ 
   │ • "What can I cook with eggs?"           │ Payload:
   │ • "Vegan breakfast ideas"                │ ├─ chat_history: []
   │                                          │ ├─ latest_message: str
   └──────────────────────────────────────────┴─ ├─ user_preferences: {}
                                                 └─ context_length: int

┌─────────────────────────────────────────────────────────────────────────────────────┐
│  STEP 2: INTENT DETECTION & CLASSIFICATION                                         │
└─────────────────────────────────────────────────────────────────────────────────────┘

[API ENDPOINT] ──────────────────────────> [IntentDetector]
                                               │
    ┌──────────────────────────────────────────┴──────────────────────────────────────┐
    │                      INTENT CLASSIFICATION                                      │
    ├─────────────────────────────────────────────────────────────────────────────────┤
    │                                                                                 │
    │  🥘 INGREDIENT_SEARCH                  🍽️  RECIPE_GENERATION                    │
    │  ────────────────────                  ───────────────────                     │
    │  • "What can I make with X?"           • "Give me a recipe for Y"              │
    │  • "Recipes using tomatoes"            • "How to make pasta"                   │
    │  • "Got chicken and rice"              • "Step-by-step lasagna"                │
    │                                                                                 │
    │  🔍 DISH_INQUIRY                       🥗 DIETARY_FILTER                        │
    │  ─────────────────                     ──────────────────                      │
    │  • "Tell me about carbonara"           • "Vegan alternatives"                  │
    │  • "What is risotto?"                  • "Gluten-free options"                 │
    │  • "Origins of pad thai"               • "Low-carb recipes"                    │
    │                                                                                 │
    └─────────────────────────────────────────────────────────────────────────────────┘
                                               │
                                               │ Intent: ENUM
                                               │ Confidence: float
                                               │ Extracted_entities: dict
                                               v

┌─────────────────────────────────────────────────────────────────────────────────────┐
│  STEP 3: QUERY EMBEDDING GENERATION                                                │
└─────────────────────────────────────────────────────────────────────────────────────┘

[IntentDetector] ──────────────────────────> [EmbeddingEngine]
                                               │
    ┌──────────────────────────────────────────┴──────────────────────────────────────┐
    │                      EMBEDDING PROCESS                                          │
    ├─────────────────────────────────────────────────────────────────────────────────┤
    │                                                                                 │
    │  📝 Text Preprocessing                 🔢 Vector Generation                      │
    │  ─────────────────────                ──────────────────                       │
    │  • Tokenization                       • Model: all-MiniLM-L6-v2                │
    │  • Normalization                      • Dimension: 384                         │
    │  • Stop word removal                  • Function: embed_text()                 │
    │  • Lemmatization                      • Output: numpy.ndarray                  │
    │                                                                                 │
    │  Input: "chicken curry with rice"                                              │
    │  Output: [0.1234, -0.5678, 0.9012, ..., 0.3456] (384 dimensions)             │
    │                                                                                 │
    └─────────────────────────────────────────────────────────────────────────────────┘
                                               │
                                               │ Query Vector: np.array(384,)
                                               v

┌─────────────────────────────────────────────────────────────────────────────────────┐
│  STEP 4: SEMANTIC RETRIEVAL (FAISS SEARCH)                                         │
└─────────────────────────────────────────────────────────────────────────────────────┘

[EmbeddingEngine] ──────────────────────────> [FAISSHandler]
                                               │
    ┌──────────────────────────────────────────┴──────────────────────────────────────┐
    │                       INDEX SELECTION LOGIC                                     │
    ├─────────────────────────────────────────────────────────────────────────────────┤
    │                                                                                 │
    │  Intent: INGREDIENT_SEARCH ──────> ingredients_cleaned.faiss                   │
    │  ├─ Search Space: Individual ingredients                                        │
    │  ├─ Use Case: "What can I make with tomatoes?"                                  │
    │  └─ Index Size: ~50k ingredient vectors                                         │
    │                                                                                 │
    │  Intent: RECIPE_GENERATION ──────> ingredients_with_quantities.faiss           │
    │  ├─ Search Space: Complete ingredient lists                                     │
    │  ├─ Use Case: "Give me a pasta recipe"                                          │
    │  └─ Index Size: ~25k recipe vectors                                             │
    │                                                                                 │
    │  Intent: DISH_INQUIRY ───────────> title_embedding.faiss                       │
    │  ├─ Search Space: Recipe titles and names                                       │
    │  ├─ Use Case: "Tell me about carbonara"                                         │
    │  └─ Index Size: ~25k title vectors                                              │
    │                                                                                 │
    └─────────────────────────────────────────────────────────────────────────────────┘
                                               │
    ┌──────────────────────────────────────────┴──────────────────────────────────────┐
    │                       FAISS SEARCH PROCESS                                      │
    ├─────────────────────────────────────────────────────────────────────────────────┤
    │                                                                                 │
    │  🔍 Vector Similarity Search                                                    │
    │  ──────────────────────────────                                                │
    │  • Algorithm: Approximate Nearest Neighbor (ANN)                               │
    │  • Distance Metric: Cosine Similarity                                          │
    │  • Search Parameters: top_k=10, nprobe=32                                      │
    │  • Index Type: IVF (Inverted File Index)                                       │
    │                                                                                 │
    │  Query Vector ──────> FAISS Index ──────> Top-K Results                        │
    │      (384d)              (IVF)              (10 recipes)                       │
    │                                                                                 │
    │  Results Format:                                                                │
    │  ├─ recipe_ids: [1234, 5678, 9012, ...]                                        │
    │  ├─ similarities: [0.95, 0.89, 0.84, ...]                                      │
    │  └─ metadata: [{title, ingredients, steps}, ...]                               │
    │                                                                                 │
    └─────────────────────────────────────────────────────────────────────────────────┘
                                               │
                                               │ Retrieved Recipes: List[RecipeData]
                                               v

┌─────────────────────────────────────────────────────────────────────────────────────┐
│  STEP 5: CONTEXT CONSTRUCTION & AUGMENTATION                                       │
└─────────────────────────────────────────────────────────────────────────────────────┘

[FAISSHandler] ──────────────────────────> [ContextBuilder]
                                               │
    ┌──────────────────────────────────────────┴──────────────────────────────────────┐
    │                     CONTEXT STRUCTURING                                         │
    ├─────────────────────────────────────────────────────────────────────────────────┤
    │                                                                                 │
    │  📋 Recipe Context Blocks                                                       │
    │  ─────────────────────────                                                     │
    │  For each retrieved recipe:                                                     │
    │                                                                                 │
    │  ┌─────────────────────────────────────────────────────────────────────────┐   │
    │  │ RECIPE #{id} (Similarity: {score})                                      │   │
    │  │ ═══════════════════════════════════════════                             │   │
    │  │ Title: {recipe_title}                                                   │   │
    │  │                                                                         │   │
    │  │ Ingredients:                                                            │   │
    │  │ • {ingredient_1} - {quantity_1}                                         │   │
    │  │ • {ingredient_2} - {quantity_2}                                         │   │
    │  │ • ...                                                                   │   │
    │  │                                                                         │   │
    │  │ Instructions:                                                           │   │
    │  │ 1. {step_1}                                                             │   │
    │  │ 2. {step_2}                                                             │   │
    │  │ ...                                                                     │   │
    │  │                                                                         │   │
    │  │ Additional Info:                                                        │   │
    │  │ • Cuisine: {cuisine_type}                                               │   │
    │  │ • Prep Time: {prep_time}                                                │   │
    │  │ • Difficulty: {difficulty_level}                                        │   │
    │  └─────────────────────────────────────────────────────────────────────────┘   │
    │                                                                                 │
    │  🔧 Context Optimization                                                        │
    │  ────────────────────                                                          │
    │  • Token limit management                                                       │
    │  • Relevance-based truncation                                                  │
    │  • Deduplication of similar recipes                                             │
    │  • Format standardization                                                       │
    │                                                                                 │
    └─────────────────────────────────────────────────────────────────────────────────┘
                                               │
                                               │ Structured Context: str
                                               v

┌─────────────────────────────────────────────────────────────────────────────────────┐
│  STEP 6: PROMPT ENGINEERING & CONSTRUCTION                                         │
└─────────────────────────────────────────────────────────────────────────────────────┘

[ContextBuilder] ──────────────────────────> [PromptEngine]
                                               │
    ┌──────────────────────────────────────────┴──────────────────────────────────────┐
    │                    PROMPT CONSTRUCTION PROCESS                                  │
    ├─────────────────────────────────────────────────────────────────────────────────┤
    │                                                                                 │
    │  🎯 System Prompt Generation                                                    │
    │  ───────────────────────────                                                   │
    │  Function: generate_system_prompt(intent, user_preferences)                     │
    │                                                                                 │
    │  ┌───────────────────────────────────────────────────────────────────────────┐ │
    │  │ SYSTEM PROMPT TEMPLATE                                                    │ │
    │  │ ════════════════════════                                                  │ │
    │  │                                                                           │ │
    │  │ You are ChefMate AI, an intelligent cooking assistant specialized in      │ │
    │  │ providing personalized recipe recommendations and cooking guidance.       │ │
    │  │                                                                           │ │
    │  │ Your capabilities include:                                                │ │
    │  │ • Analyzing available ingredients                                         │ │
    │  │ • Suggesting suitable recipes                                             │ │
    │  │ • Providing step-by-step cooking instructions                             │ │
    │  │ • Offering ingredient substitutions                                       │ │
    │  │ • Adapting recipes for dietary preferences                                │ │
    │  │                                                                           │ │
    │  │ User Intent: {detected_intent}                                            │ │
    │  │ Dietary Preferences: {user_dietary_prefs}                                 │ │
    │  │ Cooking Skill Level: {user_skill_level}                                   │ │
    │  │                                                                           │ │
    │  │ Instructions:                                                             │ │
    │  │ • Use the provided recipe context to inform your responses                │ │
    │  │ • Prioritize recipes with higher similarity scores                        │ │
    │  │ • Provide practical, actionable cooking guidance                          │ │
    │  │ • Consider user preferences and dietary restrictions                      │ │
    │  │ • Be conversational and encouraging                                       │ │
    │  │                                                                           │ │
    │  └───────────────────────────────────────────────────────────────────────────┘ │
    │                                                                                 │
    │  🔗 Final Prompt Assembly                                                       │
    │  ─────────────────────────                                                     │
    │  Function: construct_prompt(system_prompt, context, chat_history, query)        │
    │                                                                                 │
    │  Final Prompt Structure:                                                        │
    │  ├─ System Instructions     ← Generated system prompt                          │
    │  ├─ Retrieved Context       ← Top-K recipe data                                │
    │  ├─ Chat History           ← Previous conversation                             │
    │  └─ Current Query          ← Latest user message                               │
    │                                                                                 │
    │  Total Token Management: ~4000 tokens (within LLM context window)              │
    │                                                                                 │
    └─────────────────────────────────────────────────────────────────────────────────┘
                                               │
                                               │ Final Prompt: str
                                               v

┌─────────────────────────────────────────────────────────────────────────────────────┐
│  STEP 7: LLM GENERATION & STREAMING                                                │
└─────────────────────────────────────────────────────────────────────────────────────┘

[PromptEngine] ──────────────────────────> [MistralLLM] ──────────> [StreamingHandler]
                                               │                           │
    ┌──────────────────────────────────────────┴──────────────────────────┴──────────┐
    │                      LLM PROCESSING PIPELINE                                    │
    ├─────────────────────────────────────────────────────────────────────────────────┤
    │                                                                                 │
    │  🧠 Model Configuration                    📡 Streaming Configuration            │
    │  ──────────────────────                    ─────────────────────────            │
    │  • Model: Mistral-7B-Instruct-v0.2        • Protocol: Server-Sent Events       │
    │  • Format: GGUF (Q5_K_M quantization)     • Content-Type: text/event-stream    │
    │  • Context Length: 8192 tokens            • Response Format: JSON chunks        │
    │  • Temperature: 0.7                       • Streaming: Token-by-token           │
    │  • Top-p: 0.9                            • Buffering: Minimal latency          │
    │  • Max Tokens: 1024                       • Error Handling: Graceful fallback   │
    │                                                                                 │
    │  Generation Process:                       Streaming Process:                   │
    │  ┌─────────────────────┐                  ┌─────────────────────┐              │
    │  │ Input: Final Prompt │ ────────────────> │ Token Generation    │              │
    │  │ ↓                   │                  │ ↓                   │              │
    │  │ Model Inference     │                  │ Real-time Streaming │              │
    │  │ ↓                   │                  │ ↓                   │              │
    │  │ Token Prediction    │ ────────────────> │ SSE Transmission    │              │
    │  │ ↓                   │                  │ ↓                   │              │
    │  │ Response Building   │                  │ Frontend Update     │              │
    │  └─────────────────────┘                  └─────────────────────┘              │
    │                                                                                 │
    └─────────────────────────────────────────────────────────────────────────────────┘
                                               │
                                               │ Streamed Response: Generator[str]
                                               v
